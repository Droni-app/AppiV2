openapi: "3.0.0"
info:
  title: "Appi Documentation"
  version: "1.0.0"
  description: "Simple API documentation for Appi"
components:
  responses:
    Forbidden:
      description: "Access token is missing or invalid"
    Accepted:
      description: "The request was accepted"
    Created:
      description: "The resource has been created"
    NotFound:
      description: "The resource has been created"
    NotAcceptable:
      description: "The resource has been created"
  securitySchemes:
    BearerAuth:
      type: "http"
      scheme: "bearer"
    BasicAuth:
      type: "http"
      scheme: "basic"
    ApiKeyAuth:
      type: "apiKey"
      in: "header"
      name: "X-API-Key"
  schemas:
    Any:
      description: "Any JSON object not defined as schema"
    PaginationMeta:
      type: "object"
      properties:
        total:
          type: "number"
          example: 100
          nullable: false
        page:
          type: "number"
          example: 2
          nullable: false
        perPage:
          type: "number"
          example: 10
          nullable: false
        currentPage:
          type: "number"
          example: 3
          nullable: false
        lastPage:
          type: "number"
          example: 10
          nullable: false
        firstPage:
          type: "number"
          example: 1
          nullable: false
        lastPageUrl:
          type: "string"
          example: "/?page=10"
          nullable: false
        firstPageUrl:
          type: "string"
          example: "/?page=1"
          nullable: false
        nextPageUrl:
          type: "string"
          example: "/?page=6"
          nullable: false
        previousPageUrl:
          type: "string"
          example: "/?page=5"
          nullable: false
    ContentAttachment:
      type: "object"
      required: ["site_id", "user_id", "name", "path", "size", "mime"]
      properties:
        id:
          type: "string"
          example: "Lorem Ipsum"
        site_id:
          type: "string"
          example: "Lorem Ipsum"
        user_id:
          type: "string"
          example: "Lorem Ipsum"
        name:
          type: "string"
          example: "John Doe"
        path:
          type: "string"
          example: "Lorem Ipsum"
        size:
          type: "number"
          example: 909
        mime:
          type: "string"
          example: "Lorem Ipsum"
        created_at:
          type: "string"
          example: "2021-03-23T16:13:08.489+01:00"
          format: "date-time"
        site:
          $ref: "#/components/schemas/Any"
          example: null
        user:
          $ref: "#/components/schemas/Any"
          example: null
      description: "ContentAttachment (Model)"
    ContentAttr:
      type: "object"
      properties:
        id:
          type: "string"
          example: "Lorem Ipsum"
        content_post_id:
          type: "string"
          example: "Lorem Ipsum"
        name:
          type: "string"
          example: "John Doe"
        type:
          type: "string"
          example: "Lorem Ipsum"
        value:
          type: "string"
          example: "Lorem Ipsum"
        content_post:
          $ref: "#/components/schemas/Any"
          example: null
      description: "ContentAttr (Model)"
    ContentCategory:
      type: "object"
      properties:
        id:
          type: "string"
          example: "Lorem Ipsum"
        site_id:
          type: "string"
          example: "Lorem Ipsum"
        slug:
          type: "string"
          example: "Lorem Ipsum"
        name:
          type: "string"
          example: "John Doe"
        description:
          type: "string"
          example: "Lorem ipsum dolor sit amet"
        picture:
          type: "string"
          example: "Lorem Ipsum"
        created_at:
          type: "string"
          example: "2021-03-23T16:13:08.489+01:00"
          format: "date-time"
        updated_at:
          type: "string"
          example: "2021-03-23T16:13:08.489+01:00"
          format: "date-time"
      description: "ContentCategory (Model)"
    ContentPost:
      type: "object"
      properties:
        id:
          type: "string"
          example: "Lorem Ipsum"
        user_id:
          type: "string"
          example: "Lorem Ipsum"
        site_id:
          type: "string"
          example: "Lorem Ipsum"
        content_category_id:
          type: "string"
          example: "Lorem Ipsum"
        slug:
          type: "string"
          example: "Lorem Ipsum"
        name:
          type: "string"
          example: "John Doe"
        description:
          type: "string"
          example: "Lorem ipsum dolor sit amet"
        picture:
          type: "string"
          example: "Lorem Ipsum"
        content:
          type: "string"
          example: "Lorem Ipsum"
        format:
          type: "string"
          example: "Lorem Ipsum"
        active:
          type: "boolean"
          example: true
        created_at:
          type: "string"
          example: "2021-03-23T16:13:08.489+01:00"
          format: "date-time"
        updated_at:
          type: "string"
          example: "2021-03-23T16:13:08.489+01:00"
          format: "date-time"
        user:
          $ref: "#/components/schemas/Any"
          example: null
        site:
          $ref: "#/components/schemas/Any"
          example: null
        content_category:
          $ref: "#/components/schemas/Any"
          example: null
        content_attrs:
          $ref: "#/components/schemas/Any"
          example: null
        comments:
          $ref: "#/components/schemas/Any"
          example: null
      description: "ContentPost (Model)"
    LearnCourse:
      type: "object"
      required: []
      properties:
        id:
          type: "string"
          example: "Lorem Ipsum"
        site_id:
          type: "string"
          example: "Lorem Ipsum"
        user_id:
          type: "string"
          example: "Lorem Ipsum"
        category:
          type: "string"
          example: "Lorem Ipsum"
        slug:
          type: "string"
          example: "Lorem Ipsum"
        name:
          type: "string"
          example: "John Doe"
        icon:
          type: "string"
          example: "Lorem Ipsum"
        picture:
          type: "string"
          example: "Lorem Ipsum"
        video:
          type: "string"
          example: "Lorem Ipsum"
        description:
          type: "string"
          example: "Lorem ipsum dolor sit amet"
        open:
          type: "boolean"
          example: true
        rank:
          type: "number"
          example: 963
        created_at:
          type: "string"
          example: "2021-03-23T16:13:08.489+01:00"
          format: "date-time"
        updated_at:
          type: "string"
          example: "2021-03-23T16:13:08.489+01:00"
          format: "date-time"
        learn_lessons:
          $ref: "#/components/schemas/Any"
          example: null
        site:
          $ref: "#/components/schemas/Any"
          example: null
        user:
          $ref: "#/components/schemas/Any"
          example: null
      description: "LearnCourse (Model)"
    LearnCourseQuestion:
      type: "object"
      properties:
        id:
          type: "string"
          example: "Lorem Ipsum"
        user_id:
          type: "string"
          example: "Lorem Ipsum"
        course_id:
          type: "string"
          example: "Lorem Ipsum"
        name:
          type: "string"
          example: "John Doe"
        question:
          type: "string"
          example: "Lorem Ipsum"
        answer_1:
          type: "string"
          example: "Lorem Ipsum"
        answer_2:
          type: "string"
          example: "Lorem Ipsum"
        answer_3:
          type: "string"
          example: "Lorem Ipsum"
        answer_4:
          type: "string"
          example: "Lorem Ipsum"
        answer_5:
          type: "string"
          example: "Lorem Ipsum"
        wons:
          type: "number"
          example: 569
        loses:
          type: "number"
          example: 133
        difficulty:
          type: "number"
          example: 443
        rank:
          type: "number"
          example: 824
        created_at:
          type: "string"
          example: "2021-03-23T16:13:08.489+01:00"
          format: "date-time"
        updated_at:
          type: "string"
          example: "2021-03-23T16:13:08.489+01:00"
          format: "date-time"
        user:
          $ref: "#/components/schemas/Any"
          example: null
        course:
          $ref: "#/components/schemas/Any"
          example: null
      description: "LearnCourseQuestion (Model)"
    LearnLesson:
      type: "object"
      properties:
        id:
          type: "string"
          example: "Lorem Ipsum"
        learn_course_id:
          type: "string"
          example: "Lorem Ipsum"
        name:
          type: "string"
          example: "John Doe"
        slug:
          type: "string"
          example: "Lorem Ipsum"
        description:
          type: "string"
          example: "Lorem ipsum dolor sit amet"
        content:
          type: "string"
          example: "Lorem Ipsum"
        video:
          type: "string"
          example: "Lorem Ipsum"
        position:
          type: "number"
          example: 106
        type:
          type: "string"
          example: "Lorem Ipsum"
        live:
          type: "string"
          example: "Lorem Ipsum"
        live_date:
          type: "string"
          example: "2021-03-23T16:13:08.489+01:00"
          format: "date-time"
        limit_date:
          type: "string"
          example: "2021-03-23T16:13:08.489+01:00"
          format: "date-time"
        active:
          type: "boolean"
          example: true
        created_at:
          type: "string"
          example: "2021-03-23T16:13:08.489+01:00"
          format: "date-time"
        updated_at:
          type: "string"
          example: "2021-03-23T16:13:08.489+01:00"
          format: "date-time"
        learn_course:
          $ref: "#/components/schemas/Any"
          example: null
      description: "LearnLesson (Model)"
    SocialComment:
      type: "object"
      properties:
        id:
          type: "string"
          example: "Lorem Ipsum"
        user_id:
          type: "string"
          example: "Lorem Ipsum"
        site_id:
          type: "string"
          example: "Lorem Ipsum"
        commentable_type:
          type: "string"
          example: "Lorem Ipsum"
        commentable_id:
          type: "string"
          example: "Lorem Ipsum"
        content:
          type: "string"
          example: "Lorem Ipsum"
        approved_at:
          type: "string"
          example: "2021-03-23T16:13:08.489+01:00"
          format: "date-time"
        created_at:
          type: "string"
          example: "2021-03-23T16:13:08.489+01:00"
          format: "date-time"
        updated_at:
          type: "string"
          example: "2021-03-23T16:13:08.489+01:00"
          format: "date-time"
        user:
          $ref: "#/components/schemas/Any"
          example: null
        site:
          $ref: "#/components/schemas/Any"
          example: null
      description: "SocialComment (Model)"
    Enrollment:
      type: "object"
      properties:
        id:
          type: "number"
          example: 470
        site_id:
          type: "string"
          example: "Lorem Ipsum"
        user_id:
          type: "string"
          example: "Lorem Ipsum"
        role:
          type: "string"
          example: "Lorem Ipsum"
        site:
          $ref: "#/components/schemas/Any"
          example: null
        user:
          $ref: "#/components/schemas/Any"
          example: null
        created_at:
          type: "string"
          example: "2021-03-23T16:13:08.489+01:00"
          format: "date-time"
        updated_at:
          type: "string"
          example: "2021-03-23T16:13:08.489+01:00"
          format: "date-time"
      description: "Enrollment (Model)"
    Site:
      type: "object"
      properties:
        id:
          type: "string"
          example: "Lorem Ipsum"
        name:
          type: "string"
          example: "John Doe"
        domain:
          type: "string"
          example: "Lorem Ipsum"
        description:
          type: "string"
          example: "Lorem ipsum dolor sit amet"
        logo:
          type: "string"
          example: "Lorem Ipsum"
        icon:
          type: "string"
          example: "Lorem Ipsum"
        provider:
          type: "string"
          example: "Lorem Ipsum"
        provider_client_id:
          type: "string"
          example: "Lorem Ipsum"
        provider_client_secret:
          type: "string"
          example: "Lorem Ipsum"
        created_at:
          type: "string"
          example: "2021-03-23T16:13:08.489+01:00"
          format: "date-time"
        updated_at:
          type: "string"
          example: "2021-03-23T16:13:08.489+01:00"
          format: "date-time"
      description: "Site (Model)"
    User:
      type: "object"
      properties:
        id:
          type: "string"
          example: "Lorem Ipsum"
        name:
          type: "string"
          example: "John Doe"
        email:
          type: "string"
          example: "johndoe@example.com"
          format: "email"
        email_verified_at:
          type: "string"
          example: "2021-03-23T16:13:08.489+01:00"
          format: "date-time"
        provider:
          type: "string"
          example: "Lorem Ipsum"
        provider_id:
          type: "string"
          example: "Lorem Ipsum"
        avatar:
          type: "string"
          example: "https://example.com/avatar.png"
        remember_me_token:
          type: "string"
          example: "Lorem Ipsum"
        created_at:
          type: "string"
          example: "2021-03-23T16:13:08.489+01:00"
          format: "date-time"
        updated_at:
          type: "string"
          example: "2021-03-23T16:13:08.489+01:00"
          format: "date-time"
        enrollments:
          $ref: "#/components/schemas/Any"
          example: null
      description: "User (Model)"
paths:
  /:
    get:
      summary: "route"
      description: "\n\n __ - ****"
      parameters: []
      tags: []
      responses:
        200:
          description: "OK"
          content:
            application/json: {}
      security: []
  /auth/register:
    post:
      summary: " (register)"
      description: "\n\n _app/controllers/Auth/auth_controller.ts_ - **register**"
      parameters: []
      tags:
        - "REGISTER"
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
              example:
                id: "Lorem Ipsum"
                name: "John Doe"
                email: "johndoe@example.com"
                email_verified_at: "2021-03-23T16:13:08.489+01:00"
                provider: "Lorem Ipsum"
                provider_id: "Lorem Ipsum"
                avatar: "https://example.com/avatar.png"
                remember_me_token: "Lorem Ipsum"
                created_at: "2021-03-23T16:13:08.489+01:00"
                updated_at: "2021-03-23T16:13:08.489+01:00"
          description: "Returns **200** (OK) as **application/json**"
      security: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/registerValidator"
            example: {}
  /auth/login:
    post:
      summary: " (login)"
      description: "\n\n _app/controllers/Auth/auth_controller.ts_ - **login**"
      parameters: []
      tags:
        - "LOGIN"
      responses:
        200:
          content:
            text/plain:
              example: "{ user: {}, token: \"string\" }"
          description: "Returns **200** (OK) as **text/plain**"
      security: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/loginValidator"
            example: {}
  /auth/me:
    get:
      summary: " (me)"
      description: "\n\n _app/controllers/Auth/auth_controller.ts_ - **me**"
      parameters: []
      tags:
        - "ME"
      responses:
        401:
          description: "Returns **401** (Unauthorized)"
        403:
          description: "Returns **403** (Forbidden)"
      security:
        - BearerAuth:
            - "access"
  /auth/logout:
    post:
      summary: " (logout)"
      description: "\n\n _app/controllers/Auth/auth_controller.ts_ - **logout**"
      parameters: []
      tags:
        - "LOGOUT"
      responses:
        401:
          description: "Returns **401** (Unauthorized)"
        403:
          description: "Returns **403** (Forbidden)"
      security:
        - BearerAuth:
            - "access"
      requestBody:
        content:
          application/json: {}
  /sites:
    get:
      summary: "Get a list of  (index)"
      description: "\n\n _app/controllers/sites_controller.ts_ - **index**"
      parameters: []
      tags:
        - ""
      responses:
        200:
          description: "OK"
          content:
            application/json: {}
      security: []
  /sites/{id}:
    get:
      summary: "Get a single instance of :id (show)"
      description: "\n\n _app/controllers/sites_controller.ts_ - **show**"
      parameters:
        - in: "path"
          name: "id"
          schema:
            type: "string"
          required: true
      tags:
        - ":ID"
      responses:
        200:
          description: "OK"
          content:
            application/json: {}
      security: []
  /content/categories:
    get:
      summary: "Get a list of categories (index)"
      description: "\n\n _app/controllers/Content/categories_controller.ts_ - **index**"
      parameters: []
      tags:
        - "CATEGORIES"
      responses:
        200:
          description: "OK"
          content:
            application/json: {}
      security: []
  /content/categories/{id}:
    get:
      summary: "Get a single instance of categories (show)"
      description: "\n\n _app/controllers/Content/categories_controller.ts_ - **show**"
      parameters:
        - in: "path"
          name: "id"
          schema:
            type: "string"
          required: true
      tags:
        - "CATEGORIES"
      responses:
        200:
          description: "OK"
          content:
            application/json: {}
      security: []
  /content/posts:
    get:
      summary: "Get a list of posts (index)"
      description: "\n\n _app/controllers/Content/posts_controller.ts_ - **index**"
      parameters: []
      tags:
        - "POSTS"
      responses:
        200:
          description: "OK"
          content:
            application/json: {}
      security: []
  /content/posts/{id}:
    get:
      summary: "Get a single instance of posts (show)"
      description: "\n\n _app/controllers/Content/posts_controller.ts_ - **show**"
      parameters:
        - in: "path"
          name: "id"
          schema:
            type: "string"
          required: true
      tags:
        - "POSTS"
      responses:
        200:
          description: "OK"
          content:
            application/json: {}
      security: []
  /social/comments:
    get:
      summary: "Get a list of comments (index)"
      description: "\n\n _app/controllers/Social/comments_controller.ts_ - **index**"
      parameters: []
      tags:
        - "COMMENTS"
      responses:
        200:
          description: "OK"
          content:
            application/json: {}
      security: []
    post:
      summary: "Create comments (store)"
      description: "\n\n _app/controllers/Social/comments_controller.ts_ - **store**"
      parameters: []
      tags:
        - "COMMENTS"
      responses:
        401:
          description: "Returns **401** (Unauthorized)"
        403:
          description: "Returns **403** (Forbidden)"
      security:
        - BearerAuth:
            - "access"
      requestBody:
        content:
          application/json: {}
  /learn/courses:
    get:
      summary: "Get a list of courses (index)"
      description: "\n\n _app/controllers/Learn/courses_controller.ts_ - **index**"
      parameters: []
      tags:
        - "COURSES"
      responses:
        200:
          description: "OK"
          content:
            application/json: {}
      security: []
  /learn/courses/{id}:
    get:
      summary: "Get a single instance of courses (show)"
      description: "\n\n _app/controllers/Learn/courses_controller.ts_ - **show**"
      parameters:
        - in: "path"
          name: "id"
          schema:
            type: "string"
          required: true
      tags:
        - "COURSES"
      responses:
        200:
          description: "OK"
          content:
            application/json: {}
      security: []
  /learn/courses/{learn_course_id}/lessons:
    get:
      summary: "Get a list of courses (index)"
      description: "\n\n _app/controllers/Learn/course_lessons_controller.ts_ - **index**"
      parameters:
        - in: "path"
          name: "learn_course_id"
          schema:
            type: "string"
          required: true
      tags:
        - "COURSES"
      responses:
        200:
          description: "OK"
          content:
            application/json: {}
      security: []
  /learn/courses/{learn_course_id}/lessons/{id}:
    get:
      summary: "Get a single instance of courses (show)"
      description: "\n\n _app/controllers/Learn/course_lessons_controller.ts_ - **show**"
      parameters:
        - in: "path"
          name: "learn_course_id"
          schema:
            type: "string"
          required: true
        - in: "path"
          name: "id"
          schema:
            type: "string"
          required: true
      tags:
        - "COURSES"
      responses:
        200:
          description: "OK"
          content:
            application/json: {}
      security: []
  /learn/courses/{learn_course_id}/questions:
    get:
      summary: "Get a list of courses (index)"
      description: "\n\n _app/controllers/Learn/course_questions_controller.ts_ - **index**"
      parameters:
        - in: "path"
          name: "learn_course_id"
          schema:
            type: "string"
          required: true
      tags:
        - "COURSES"
      responses:
        200:
          description: "OK"
          content:
            application/json: {}
      security: []
  /learn/courses/{learn_course_id}/questions/{id}:
    get:
      summary: "Get a single instance of courses (show)"
      description: "\n\n _app/controllers/Learn/course_questions_controller.ts_ - **show**"
      parameters:
        - in: "path"
          name: "learn_course_id"
          schema:
            type: "string"
          required: true
        - in: "path"
          name: "id"
          schema:
            type: "string"
          required: true
      tags:
        - "COURSES"
      responses:
        200:
          description: "OK"
          content:
            application/json: {}
      security: []
  /content/attachments:
    get:
      summary: "Get a list of attachments (index)"
      description: "\n\n _app/controllers/Content/attachments_controller.ts_ - **index**"
      parameters: []
      tags:
        - "ATTACHMENTS"
      responses:
        401:
          description: "Returns **401** (Unauthorized)"
        403:
          description: "Returns **403** (Forbidden)"
      security:
        - BearerAuth:
            - "access"
    post:
      summary: "Create attachments (store)"
      description: "\n\n _app/controllers/Content/attachments_controller.ts_ - **store**"
      parameters: []
      tags:
        - "ATTACHMENTS"
      responses:
        401:
          description: "Returns **401** (Unauthorized)"
        403:
          description: "Returns **403** (Forbidden)"
      security:
        - BearerAuth:
            - "access"
      requestBody:
        content:
          application/json: {}
  /content/attachments/{id}:
    delete:
      summary: "Delete attachments (destroy)"
      description: "\n\n _app/controllers/Content/attachments_controller.ts_ - **destroy**"
      parameters:
        - in: "path"
          name: "id"
          schema:
            type: "string"
          required: true
      tags:
        - "ATTACHMENTS"
      responses:
        401:
          description: "Returns **401** (Unauthorized)"
        403:
          description: "Returns **403** (Forbidden)"
      security:
        - BearerAuth:
            - "access"
  /back/content/categories:
    get:
      summary: "Get a list of content (index)"
      description: "\n\n _app/controllers/Back/Content/categories_controller.ts_ - **index**"
      parameters: []
      tags:
        - "CONTENT"
      responses:
        401:
          description: "Returns **401** (Unauthorized)"
        403:
          description: "Returns **403** (Forbidden)"
      security:
        - BearerAuth:
            - "access"
    post:
      summary: "Create content (store)"
      description: "\n\n _app/controllers/Back/Content/categories_controller.ts_ - **store**"
      parameters: []
      tags:
        - "CONTENT"
      responses:
        401:
          description: "Returns **401** (Unauthorized)"
        403:
          description: "Returns **403** (Forbidden)"
      security:
        - BearerAuth:
            - "access"
      requestBody:
        content:
          application/json: {}
  /back/content/categories/{id}:
    get:
      summary: "Get a single instance of content (show)"
      description: "\n\n _app/controllers/Back/Content/categories_controller.ts_ - **show**"
      parameters:
        - in: "path"
          name: "id"
          schema:
            type: "string"
          required: true
      tags:
        - "CONTENT"
      responses:
        401:
          description: "Returns **401** (Unauthorized)"
        403:
          description: "Returns **403** (Forbidden)"
      security:
        - BearerAuth:
            - "access"
    put:
      summary: "Update content (update)"
      description: "\n\n _app/controllers/Back/Content/categories_controller.ts_ - **update**"
      parameters:
        - in: "path"
          name: "id"
          schema:
            type: "string"
          required: true
      tags:
        - "CONTENT"
      responses:
        401:
          description: "Returns **401** (Unauthorized)"
        403:
          description: "Returns **403** (Forbidden)"
      security:
        - BearerAuth:
            - "access"
      requestBody:
        content:
          application/json: {}
    delete:
      summary: "Delete content (destroy)"
      description: "\n\n _app/controllers/Back/Content/categories_controller.ts_ - **destroy**"
      parameters:
        - in: "path"
          name: "id"
          schema:
            type: "string"
          required: true
      tags:
        - "CONTENT"
      responses:
        401:
          description: "Returns **401** (Unauthorized)"
        403:
          description: "Returns **403** (Forbidden)"
      security:
        - BearerAuth:
            - "access"
  /back/content/posts:
    get:
      summary: "Get a list of content (index)"
      description: "\n\n _app/controllers/Back/Content/posts_controller.ts_ - **index**"
      parameters: []
      tags:
        - "CONTENT"
      responses:
        401:
          description: "Returns **401** (Unauthorized)"
        403:
          description: "Returns **403** (Forbidden)"
      security:
        - BearerAuth:
            - "access"
    post:
      summary: "Create content (store)"
      description: "\n\n _app/controllers/Back/Content/posts_controller.ts_ - **store**"
      parameters: []
      tags:
        - "CONTENT"
      responses:
        401:
          description: "Returns **401** (Unauthorized)"
        403:
          description: "Returns **403** (Forbidden)"
      security:
        - BearerAuth:
            - "access"
      requestBody:
        content:
          application/json: {}
  /back/content/posts/{id}:
    get:
      summary: "Get a single instance of content (show)"
      description: "\n\n _app/controllers/Back/Content/posts_controller.ts_ - **show**"
      parameters:
        - in: "path"
          name: "id"
          schema:
            type: "string"
          required: true
      tags:
        - "CONTENT"
      responses:
        401:
          description: "Returns **401** (Unauthorized)"
        403:
          description: "Returns **403** (Forbidden)"
      security:
        - BearerAuth:
            - "access"
    put:
      summary: "Update content (update)"
      description: "\n\n _app/controllers/Back/Content/posts_controller.ts_ - **update**"
      parameters:
        - in: "path"
          name: "id"
          schema:
            type: "string"
          required: true
      tags:
        - "CONTENT"
      responses:
        401:
          description: "Returns **401** (Unauthorized)"
        403:
          description: "Returns **403** (Forbidden)"
      security:
        - BearerAuth:
            - "access"
      requestBody:
        content:
          application/json: {}
    delete:
      summary: "Delete content (destroy)"
      description: "\n\n _app/controllers/Back/Content/posts_controller.ts_ - **destroy**"
      parameters:
        - in: "path"
          name: "id"
          schema:
            type: "string"
          required: true
      tags:
        - "CONTENT"
      responses:
        401:
          description: "Returns **401** (Unauthorized)"
        403:
          description: "Returns **403** (Forbidden)"
      security:
        - BearerAuth:
            - "access"
  /back/content/posts/{back_content_post_id}/attrs:
    post:
      summary: "Create content (store)"
      description: "\n\n _app/controllers/Back/Content/post_attrs_controller.ts_ - **store**"
      parameters:
        - in: "path"
          name: "back_content_post_id"
          schema:
            type: "string"
          required: true
      tags:
        - "CONTENT"
      responses:
        401:
          description: "Returns **401** (Unauthorized)"
        403:
          description: "Returns **403** (Forbidden)"
      security:
        - BearerAuth:
            - "access"
      requestBody:
        content:
          application/json: {}
  /back/content/posts/{back_content_post_id}/attrs/{id}:
    delete:
      summary: "Delete content (destroy)"
      description: "\n\n _app/controllers/Back/Content/post_attrs_controller.ts_ - **destroy**"
      parameters:
        - in: "path"
          name: "back_content_post_id"
          schema:
            type: "string"
          required: true
        - in: "path"
          name: "id"
          schema:
            type: "string"
          required: true
      tags:
        - "CONTENT"
      responses:
        401:
          description: "Returns **401** (Unauthorized)"
        403:
          description: "Returns **403** (Forbidden)"
      security:
        - BearerAuth:
            - "access"
  /back/content/attachments:
    get:
      summary: "Get a list of content (index)"
      description: "\n\n _app/controllers/Back/Content/attachments_controller.ts_ - **index**"
      parameters: []
      tags:
        - "CONTENT"
      responses:
        401:
          description: "Returns **401** (Unauthorized)"
        403:
          description: "Returns **403** (Forbidden)"
      security:
        - BearerAuth:
            - "access"
    post:
      summary: "Create content (store)"
      description: "\n\n _app/controllers/Back/Content/attachments_controller.ts_ - **store**"
      parameters: []
      tags:
        - "CONTENT"
      responses:
        401:
          description: "Returns **401** (Unauthorized)"
        403:
          description: "Returns **403** (Forbidden)"
      security:
        - BearerAuth:
            - "access"
      requestBody:
        content:
          application/json: {}
  /back/content/attachments/{id}:
    delete:
      summary: "Delete content (destroy)"
      description: "\n\n _app/controllers/Back/Content/attachments_controller.ts_ - **destroy**"
      parameters:
        - in: "path"
          name: "id"
          schema:
            type: "string"
          required: true
      tags:
        - "CONTENT"
      responses:
        401:
          description: "Returns **401** (Unauthorized)"
        403:
          description: "Returns **403** (Forbidden)"
      security:
        - BearerAuth:
            - "access"
  /back/social/comments:
    get:
      summary: "Get a list of social (index)"
      description: "\n\n _app/controllers/Back/Social/comments_controller.ts_ - **index**"
      parameters: []
      tags:
        - "SOCIAL"
      responses:
        401:
          description: "Returns **401** (Unauthorized)"
        403:
          description: "Returns **403** (Forbidden)"
      security:
        - BearerAuth:
            - "access"
  /back/social/comments/{id}:
    put:
      summary: "Update social (update)"
      description: "\n\n _app/controllers/Back/Social/comments_controller.ts_ - **update**"
      parameters:
        - in: "path"
          name: "id"
          schema:
            type: "string"
          required: true
      tags:
        - "SOCIAL"
      responses:
        401:
          description: "Returns **401** (Unauthorized)"
        403:
          description: "Returns **403** (Forbidden)"
      security:
        - BearerAuth:
            - "access"
      requestBody:
        content:
          application/json: {}
    delete:
      summary: "Delete social (destroy)"
      description: "\n\n _app/controllers/Back/Social/comments_controller.ts_ - **destroy**"
      parameters:
        - in: "path"
          name: "id"
          schema:
            type: "string"
          required: true
      tags:
        - "SOCIAL"
      responses:
        401:
          description: "Returns **401** (Unauthorized)"
        403:
          description: "Returns **403** (Forbidden)"
      security:
        - BearerAuth:
            - "access"
  /back/learn/courses:
    get:
      summary: "Get a list of learn (index)"
      description: "\n\n _app/controllers/Back/Learn/courses_controller.ts_ - **index**"
      parameters: []
      tags:
        - "LEARN"
      responses:
        401:
          description: "Returns **401** (Unauthorized)"
        403:
          description: "Returns **403** (Forbidden)"
      security:
        - BearerAuth:
            - "access"
    post:
      summary: "Create learn (store)"
      description: "\n\n _app/controllers/Back/Learn/courses_controller.ts_ - **store**"
      parameters: []
      tags:
        - "LEARN"
      responses:
        401:
          description: "Returns **401** (Unauthorized)"
        403:
          description: "Returns **403** (Forbidden)"
      security:
        - BearerAuth:
            - "access"
      requestBody:
        content:
          application/json: {}
  /back/learn/courses/{id}:
    get:
      summary: "Get a single instance of learn (show)"
      description: "\n\n _app/controllers/Back/Learn/courses_controller.ts_ - **show**"
      parameters:
        - in: "path"
          name: "id"
          schema:
            type: "string"
          required: true
      tags:
        - "LEARN"
      responses:
        401:
          description: "Returns **401** (Unauthorized)"
        403:
          description: "Returns **403** (Forbidden)"
      security:
        - BearerAuth:
            - "access"
    put:
      summary: "Update learn (update)"
      description: "\n\n _app/controllers/Back/Learn/courses_controller.ts_ - **update**"
      parameters:
        - in: "path"
          name: "id"
          schema:
            type: "string"
          required: true
      tags:
        - "LEARN"
      responses:
        401:
          description: "Returns **401** (Unauthorized)"
        403:
          description: "Returns **403** (Forbidden)"
      security:
        - BearerAuth:
            - "access"
      requestBody:
        content:
          application/json: {}
    delete:
      summary: "Delete learn (destroy)"
      description: "\n\n _app/controllers/Back/Learn/courses_controller.ts_ - **destroy**"
      parameters:
        - in: "path"
          name: "id"
          schema:
            type: "string"
          required: true
      tags:
        - "LEARN"
      responses:
        401:
          description: "Returns **401** (Unauthorized)"
        403:
          description: "Returns **403** (Forbidden)"
      security:
        - BearerAuth:
            - "access"
  /back/learn/courses/{back_learn_course_id}/lessons:
    get:
      summary: "Get a list of learn (index)"
      description: "\n\n _app/controllers/Back/Learn/course_lessons_controller.ts_ - **index**"
      parameters:
        - in: "path"
          name: "back_learn_course_id"
          schema:
            type: "string"
          required: true
      tags:
        - "LEARN"
      responses:
        401:
          description: "Returns **401** (Unauthorized)"
        403:
          description: "Returns **403** (Forbidden)"
      security:
        - BearerAuth:
            - "access"
    post:
      summary: "Create learn (store)"
      description: "\n\n _app/controllers/Back/Learn/course_lessons_controller.ts_ - **store**"
      parameters:
        - in: "path"
          name: "back_learn_course_id"
          schema:
            type: "string"
          required: true
      tags:
        - "LEARN"
      responses:
        401:
          description: "Returns **401** (Unauthorized)"
        403:
          description: "Returns **403** (Forbidden)"
      security:
        - BearerAuth:
            - "access"
      requestBody:
        content:
          application/json: {}
  /back/learn/courses/{back_learn_course_id}/lessons/{id}:
    get:
      summary: "Get a single instance of learn (show)"
      description: "\n\n _app/controllers/Back/Learn/course_lessons_controller.ts_ - **show**"
      parameters:
        - in: "path"
          name: "back_learn_course_id"
          schema:
            type: "string"
          required: true
        - in: "path"
          name: "id"
          schema:
            type: "string"
          required: true
      tags:
        - "LEARN"
      responses:
        401:
          description: "Returns **401** (Unauthorized)"
        403:
          description: "Returns **403** (Forbidden)"
      security:
        - BearerAuth:
            - "access"
    put:
      summary: "Update learn (update)"
      description: "\n\n _app/controllers/Back/Learn/course_lessons_controller.ts_ - **update**"
      parameters:
        - in: "path"
          name: "back_learn_course_id"
          schema:
            type: "string"
          required: true
        - in: "path"
          name: "id"
          schema:
            type: "string"
          required: true
      tags:
        - "LEARN"
      responses:
        401:
          description: "Returns **401** (Unauthorized)"
        403:
          description: "Returns **403** (Forbidden)"
      security:
        - BearerAuth:
            - "access"
      requestBody:
        content:
          application/json: {}
    delete:
      summary: "Delete learn (destroy)"
      description: "\n\n _app/controllers/Back/Learn/course_lessons_controller.ts_ - **destroy**"
      parameters:
        - in: "path"
          name: "back_learn_course_id"
          schema:
            type: "string"
          required: true
        - in: "path"
          name: "id"
          schema:
            type: "string"
          required: true
      tags:
        - "LEARN"
      responses:
        401:
          description: "Returns **401** (Unauthorized)"
        403:
          description: "Returns **403** (Forbidden)"
      security:
        - BearerAuth:
            - "access"
  /back/learn/courses/{back_learn_course_id}/questions:
    get:
      summary: "Get a list of learn (index)"
      description: "\n\n _app/controllers/Back/Learn/course_questions_controller.ts_ - **index**"
      parameters:
        - in: "path"
          name: "back_learn_course_id"
          schema:
            type: "string"
          required: true
      tags:
        - "LEARN"
      responses:
        401:
          description: "Returns **401** (Unauthorized)"
        403:
          description: "Returns **403** (Forbidden)"
      security:
        - BearerAuth:
            - "access"
    post:
      summary: "Create learn (store)"
      description: "\n\n _app/controllers/Back/Learn/course_questions_controller.ts_ - **store**"
      parameters:
        - in: "path"
          name: "back_learn_course_id"
          schema:
            type: "string"
          required: true
      tags:
        - "LEARN"
      responses:
        401:
          description: "Returns **401** (Unauthorized)"
        403:
          description: "Returns **403** (Forbidden)"
      security:
        - BearerAuth:
            - "access"
      requestBody:
        content:
          application/json: {}
  /back/learn/courses/{back_learn_course_id}/questions/{id}:
    get:
      summary: "Get a single instance of learn (show)"
      description: "\n\n _app/controllers/Back/Learn/course_questions_controller.ts_ - **show**"
      parameters:
        - in: "path"
          name: "back_learn_course_id"
          schema:
            type: "string"
          required: true
        - in: "path"
          name: "id"
          schema:
            type: "string"
          required: true
      tags:
        - "LEARN"
      responses:
        401:
          description: "Returns **401** (Unauthorized)"
        403:
          description: "Returns **403** (Forbidden)"
      security:
        - BearerAuth:
            - "access"
    put:
      summary: "Update learn (update)"
      description: "\n\n _app/controllers/Back/Learn/course_questions_controller.ts_ - **update**"
      parameters:
        - in: "path"
          name: "back_learn_course_id"
          schema:
            type: "string"
          required: true
        - in: "path"
          name: "id"
          schema:
            type: "string"
          required: true
      tags:
        - "LEARN"
      responses:
        401:
          description: "Returns **401** (Unauthorized)"
        403:
          description: "Returns **403** (Forbidden)"
      security:
        - BearerAuth:
            - "access"
      requestBody:
        content:
          application/json: {}
    delete:
      summary: "Delete learn (destroy)"
      description: "\n\n _app/controllers/Back/Learn/course_questions_controller.ts_ - **destroy**"
      parameters:
        - in: "path"
          name: "back_learn_course_id"
          schema:
            type: "string"
          required: true
        - in: "path"
          name: "id"
          schema:
            type: "string"
          required: true
      tags:
        - "LEARN"
      responses:
        401:
          description: "Returns **401** (Unauthorized)"
        403:
          description: "Returns **403** (Forbidden)"
      security:
        - BearerAuth:
            - "access"
tags:
  - name: "REGISTER"
    description: "Everything related to REGISTER"
  - name: "LOGIN"
    description: "Everything related to LOGIN"
  - name: "ME"
    description: "Everything related to ME"
  - name: "LOGOUT"
    description: "Everything related to LOGOUT"
  - name: ":ID"
    description: "Everything related to :ID"
  - name: "CATEGORIES"
    description: "Everything related to CATEGORIES"
  - name: "POSTS"
    description: "Everything related to POSTS"
  - name: "COMMENTS"
    description: "Everything related to COMMENTS"
  - name: "COURSES"
    description: "Everything related to COURSES"
  - name: "ATTACHMENTS"
    description: "Everything related to ATTACHMENTS"
  - name: "CONTENT"
    description: "Everything related to CONTENT"
  - name: "SOCIAL"
    description: "Everything related to SOCIAL"
  - name: "LEARN"
    description: "Everything related to LEARN"
